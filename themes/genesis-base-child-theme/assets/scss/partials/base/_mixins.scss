/**
 * /assets/scss/partials/base/mixins.scss
 *
 * Let's define our universal mixins for use throughout the theme
 *
 */

/**
* Base text styles
*/
%base-style {
     height: auto;
     min-height: auto;
     color: var(--wp--preset--color--foreground);
     font-size: var(--wp--preset--font-size--normal);
     line-height: var(--wp--custom--typography--line-height--normal);
     font-weight: 400;
}


/**
* Base button styles
*/
%button-styles {
     display: inline-block;
     padding: 10px 15px;
     height: auto;
     border: 2px solid var(--wp--preset--color--primary);
     background: var(--wp--preset--color--primary);
     color: var(--wp--preset--color--white);
     font-size: var(--wp--preset--font-size--normal);
     cursor: pointer;
     border-radius: 3px;

     &:hover,
     &:focus {
          border-color: var(--wp--custom--color--primary-darken);
          background: var(--wp--custom--color--primary-darken);
          color: var(--wp--preset--color--white);
          text-decoration: none;
     }
}


/**
* Transitions
*/
%transition {
     transition: all 0.2s ease-in-out;
}


/**
* RGBA color conversion
*/
@mixin rgba-background( $hexcolor, $opacity ) {
     background-color: $hexcolor;
     background-color: rgba( $hexcolor, $opacity );
}


/**
 * Placeholder Color
 */
@mixin placeholder-color( $color ) {

     ::-moz-placeholder {
          color: $color;
          opacity: 1;
     }

     ::-ms-input-placeholder {
          color: $color;
     }

     ::-webkit-input-placeholder {
          color: $color;
     }

     input:focus::-webkit-input-placeholder,
     input:focus::-moz-placeholder,
     input:focus:-ms-input-placeholder,
     textarea:focus::-webkit-input-placeholder,
     textarea:focus::-moz-placeholder,
     textarea:focus:-ms-input-placeholder {
          color: transparent;
     }

}

/**
 * Responsive font sizes
 */
@mixin font-sizes( $desktop: null, $tablet: null, $mobile: null ) {

     @if( $desktop ) {
          font-size: $desktop;
     }

     @if( $tablet ) {
          @include media( 'tablet' ) {
               font-size: $tablet;
          }
     }

     @if( $mobile ) {
          @include media( 'mobile' ) {
               font-size: $mobile;
          }
     }
}

/**
 * Default responsive spacing
 */
@mixin spacing( $orientation: null, $size: null ) {

     @if 'vertical' == $orientation {

          padding-top: calc(var(--wp--custom--layout--block-gap) * 4);
          padding-bottom: calc(var(--wp--custom--layout--block-gap) * 4);

          @include media( 'tablet' ) {
               padding-top: calc(var(--wp--custom--layout--block-gap) * 3);
               padding-bottom: calc(var(--wp--custom--layout--block-gap) * 3);
          }

          @include media( 'mobile' ) {
               padding-top: calc(var(--wp--custom--layout--block-gap) * 2);
               padding-bottom: calc(var(--wp--custom--layout--block-gap) * 2);
          }
     }

     @if 'horizontal' == $orientation {

          padding-left: var(--wp--custom--layout--block-gap);
          padding-right: var(--wp--custom--layout--block-gap);

          @include media( 'tablet' ) {
               padding-left: var(--wp--custom--layout--block-gap);
               padding-left: var(--wp--custom--layout--block-gap);
          }

          @include media( 'mobile' ) {
               padding-left: var(--wp--custom--layout--block-gap);
               padding-left: var(--wp--custom--layout--block-gap);
          }
     }

     @if 'both' == $orientation {

          padding: var(--wp--custom--layout--block-gap);

          @include media( 'tablet' ) {
               padding: var(--wp--custom--layout--block-gap);
          }

          @include media( 'mobile' ) {
               padding: var(--wp--custom--layout--block-gap);
          }

          @if 'large' == $size {
               padding: calc(var(--wp--custom--layout--block-gap) * 4) var(--wp--custom--layout--block-gap);

               @include media( 'tablet' ) {
                    padding: calc(var(--wp--custom--layout--block-gap) * 3) var(--wp--custom--layout--block-gap);
               }

               @include media( 'mobile' ) {
                    padding: calc(var(--wp--custom--layout--block-gap) * 2) var(--wp--custom--layout--block-gap);
               }
          }

          @if 'no-vertical' == $size {
               padding-top: 0;
               padding-bottom: 0;

               @include media( 'tablet' ) {
                    padding-top: 0;
                    padding-bottom: 0;
               }

               @include media( 'mobile' ) {
                    padding-top: 0;
                    padding-bottom: 0;
               }
          }

     }
}


/**
 * Media queries
 */
 @mixin media( $name ) {

     // If the key exists in the map
     @if map-has-key( $breakpoints, $name ) {

          // Prints a media query based on the value
          @media #{inspect( map-get( $breakpoints, $name ) )} {
               @content;
          }
     }
 }
